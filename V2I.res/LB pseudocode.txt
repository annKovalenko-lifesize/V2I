//pseudocode for the Load Balancer heuristics
//Anna Kovalenko

private void allocateBS(Base Station bs[], Task t){

	int bestBS = 0;		
	float probability = 0.00;
	for(int i = 0; i < bs.size, i++){
		Base Station current = bs[i];
		float currentP = current.getP(t);	// get the probability for the task t to meet it's deadline on the current BS
		if(i == 0){				// if recieving BS, just set the global probability variable equal to the task's probability in receiving BS
			probability = currentP;
		}
		else if(currentP > probability){	//if the probability on the current BS is better then previous
			probability = currentP;		//set the global probability to it's value, and set the best BS to the current BS
			bestBS = i;
		}
		else if(currentP == probability){		// if the prob. on the current machine is the same as the best one so far
			Base Station previous = bs[bestBS];	// get the best BS so far as "previous"
			if(previous.getSD > current.getSD){	// get Standard Deviations for both BS and assign the one that has the smallest SD
				probability = currentP;		// as a new best BS 
				bestBS = i;
			}
		}
	}
	Base Station finalBS = bs[bestBS];			// after for loop is completed, get the best BS and allocate the task
	finalBS.allocate(t);
}