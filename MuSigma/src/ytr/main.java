package ytr;

import java.util.ArrayList;

public class main {
	
	public static void main(String[] args) {
		
		double[] m = new double[24];
		double[] si = new double[24];;
		
		double[][] s = {{8.321167883211679,8.692628650904034,8.218232044198896,6.901311249137336,8.97513644633111,9.01932712956335,8.890374331550802,8.983286908077995,6.139677666922487,8.224163027656477},
				{26.210924081071795,22.091819123230927,27.992087042532145,23.095737246680642,36.05263157894737,24.192439862542955,20.679576178297406,30.864197530864196,20.41191614564178,24.532153793807417},
				{48.323471400394475,47.97166773985834,40.431075319753674,46.513217866909756,43.81382094514367,44.98726557073397,41.95016770483948,41.17224880382775,44.55603743437571,46.862302483069975},
				{57.42747291156938,54.291682491454615,58.37189374464439,60.81639398446538,53.75098193244305,61.0376896720509,56.547726861075894,55.08137432188065,55.11926605504587,59.979476654694714},
				{65.99657827202738,66.39822271591224,67.57551456829725,66.70299727520435,66.0582908885116,69.08598510494245,65.36723163841808,68.85224098949328,63.05603246449196,67.18017414601474},
				{73.31946573242828,72.35521235521236,73.7120897382634,71.53880563632298,71.11211064882492,67.591763652641,70.13856812933025,72.04558404558405,71.95435731066115,70.94243857423001},



				{8.811475409836065,8.719346049046322,7.910750507099391,8.095781071835804,8.878504672897197,8.752997601918466,8.759757155247181,7.862190812720848,8.408953418027828,7.074721780604134},{7.88514129443938,10.875912408759124,28.30006439150032,28.089151098000656,35.98862019914652,15.715372907153728,19.46657429857984,20.06677796327212,24.966124661246614,22.822719449225474},{48.43029637760703,33.8563829787234,36.22047244094488,50.15486725663717,51.56912637828668,45.08327629477527,46.07293127629733,44.74293654469662,41.59622078567877,41.43524207421971},{59.06841835864187,62.635956493921945,62.65723270440252,57.82855118668083,60.285517715858276,53.697279532590834,61.222071767095464,60.31181155736316,59.23970432946146,61.262458471760795},{68.06130903065451,63.54912414318355,64.55586146935227,65.16072980017377,64.77779375809003,68.5114503816794,63.45811051693405,66.8398146848238,67.65442404006677,66.1360544217687},{72.27459243650881,67.38814993954051,72.54449571522743,71.32083841632472,69.08725941669618,66.07073954983923,71.40676117775354,70.9520578923564,70.61716828668462,70.96701310438318},

				

				{9.64230171073095,8.455392809587217,7.801950487621905,6.083650190114068,7.451471509079524,6.894150417827298,6.568364611260054,8.69205298013245,9.834983498349835,6.995336442371753},{27.68472906403941,22.82646345687565,16.7112810707457,9.0990990990991,29.852618375666353,22.37263982899893,20.95629435935749,28.665207877461707,24.139118457300274,26.107541427122083},{38.646847770374166,42.32414448669201,40.445314411548814,36.979166666666664,44.779307071665876,47.074768466229955,53.9302227826818,45.0872359963269,36.82310469314079,46.14509893108938},{59.56628191675411,61.050694328258324,60.96913375373382,57.59331856144537,62.88175411119812,56.17792421746293,58.542624690484615,55.50557754587981,59.76890756302521,58.84216083054724},{67.57865937072503,66.27890277179377,64.65396469599328,66.08129160175612,64.77821695213,63.062145248144375,67.13967723984419,66.2818527382796,63.12729498164015,64.5827232796486},{68.41199606686332,69.6851298552057,71.13966480446928,69.42148760330579,69.02147971360382,68.0887165192098,69.70944594753558,71.28536422365784,68.6969008017231,69.38656052446734},

				

				{27.120669056152927,19.774011299435028,18.236472945891784,19.42970822281167,19.986023759608667,20.54982817869416,16.894977168949772,25.130283729009843,17.151607963246555,23.260188087774296},
				{36.12512613521695,37.05035971223022,42.167220042257775,35.5772584583188,36.050269299820464,39.8236092265943,38.101559907069365,36.86815129020855,35.209713024282564,36.879917892576124},
				{52.89346777729066,43.47826086956522,49.56680346557228,44.66114090687469,50.0462748727441,48.444231689803736,48.67712479512995,44.418114797261715,44.540513833992094,53.60979802320585},
				{62.63073923063287,60.501235439463464,64.41985244802146,59.39609902475619,60.80402010050251,62.537512504168056,63.350354142645365,67.21909685266839,62.51282051282051,61.25560538116592},
				{81.9396551724138,81.13290398126463,82.14236351071182,81.66854248733821,82.33289646133683,81.49145241620676,81.56028368794327,82.3680649526387,82.10922787193974,80.88737201365188},
				{97.01657458563535,96.58014927035758,96.93821760524877,96.72858978852669,96.96449026345934,96.71894116338561,96.9556360344047,97.12212817412333,96.87538291875995,96.73640167364017}};
				
		for(int i = 0; i < s.length; i++) {
			
				double mean = getmean(s[i]);
				m[i] = mean;
				double sigma = getSigma(s[i], mean);
				si[i] = sigma;
				
				
		}
		for(int i = 0; i < m.length; i++) {
			System.out.print(m[i] + ",");
		}
		System.out.print("\n");
		for(int i = 0; i < si.length; i++) {
			System.out.print(si[i] + ",");
		}
	
		
	}
	
	public static double getSigma(double[] vals, double mean) {
		double sigma = 0.0;
		for(int i = 0; i < vals.length; i++) {
			sigma += (vals[i]-mean)*(vals[i]-mean);
		}
		sigma = sigma/(vals.length-1);
		sigma = Math.sqrt(sigma);
		return sigma;
	}
	
	public static double getmean(double[] vals) {
		double mean = 0.0;
		for(int i = 0; i < vals.length; i++) {
			mean += vals[i];
		}
		mean = mean/vals.length;
		return mean;
	}
	
	//1.4

	public static String replace(String s) {
		
		char[] str = s.toCharArray();
		int index = 0;
		ArrayList<Character> newArr = new ArrayList<>();
		for(int i = 0; i< s.length(); i++) {
			
			if((int)str[i] !=32) {
				newArr.add(index, str[i]);
				index++;
			}
			else {
				newArr.add(index, '%');
				newArr.add((index+1), '2');
				newArr.add((index+2), '0');
				index += 3;
			}
			
		}
		String finStr = "";
		for(int i = 0; i<newArr.size(); i++) {
			finStr += (newArr.get(i).charValue());
		}
		
		
		return finStr;
	}
	
	//1.5
	
	public static String compress(String s) {
		
		int count = 1;
		StringBuffer st = new StringBuffer();
		for(int i = 1; i < s.length(); i++) {
			char next = s.charAt(i);
			char current = s.charAt(i-1);
			if(current == next) {
				count++;
			}
			else {
				st.append(current);
				st.append(count);
				count = 1;
			}	
		}
		if(s == null || s.isEmpty() || s.length() <= st.length()) {
			return s;
		}
		else {
			return st.toString();
		}
	}
	
	public static ArrayList<Integer> localMaxima(int[] arr) {
		
		ArrayList<Integer> maximas = new ArrayList<>();
		if(arr[0] > arr[1]) {
			maximas.add(arr[0]);
		}
		
		int prev = 0;
		int next = 0;
		int curr = 0;
		for(int i = 1; i < arr.length-1; i++ ) {
			prev = arr[i-1];
			next = arr[i+1];
			curr = arr[i];
			if(prev < curr && next < curr) {
				maximas.add(curr);
			}
		}
		if(arr[arr.length-1] > arr[arr.length - 2]) {
			maximas.add(arr[arr.length-1]);
		}
		
		return maximas;
	}
	
}
