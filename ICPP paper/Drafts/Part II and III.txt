II. SCENARIO
In V2I communication an ideal scenario of service happens as follows. While driving through the roads, vehicles request services from the Base Stations. As the request is generated, it travels from the vehicle to the Base Station. The result is sent back to the requesting vehicle when the processing is completed. The majority of requests are delay-sensitive which means that request response needs to reach the vehicle within a certain time frame. This time frame is defined in our research as an individual deadline for each specific task.
Fig. 1: A Vehicle to infrastructure communication scenario where vehicles send requests to the Base Station and receive the response from the Base Station. A Base Station is a roadside unit with processing and communication abilities.

III. PROBLEM STATEMENT AND SYSTEM MODEL

A. Problem Statement
The main goal of this research is to offer a robust allocation algorithm in presence of heterogeneity across the Base Stations during the oversubscription situation. In order to support real-time task processing in Base Stations, task allocation algorithm has to be efficient. Therefore, we define a problem as, "How to allocate arriving tasks to a Base Station in a V2I network so that the number of tasks missing their deadline is minimised?"

B. System Model
1) Formulation:  In our scenario a set of tasks is generated by vehicles and sent to the Base Station for processing. Every task has its own deadline within which it has to be completed. Our system allocates the tasks to Base Stations considering individual deadlines. Allocation algorithm aims to maximise the number of tasks meeting their deadline. According to the problem definition, the set of arriving tasks can be defined as ”T”, where T = ft1; t2; t3; t4 : : : ; tng  and the set of Base Stations ”BS”, where BS = fbs1;bs2;bs3;bs4 : : : ;bsmg . The set of tasks that meet their deadline can be denoted as Ts, which is the subset of T (Ts _  T). It is assumed that a task ti is allocated to the base station bsj when the task ti can meet its deadline di in that specific base station bsj. The problem can be formulated as:

2) Assumptions:  We assume that V2I services are provided to the moving vehicles on the road by means of the Base Stations.  In our system model Base Stations are stationary edge devices with memory storage, computational capacity, and short wireless range transmission system [7]. It is also assumed that a receiving Base Station is connected to the one-hop distance Base Stations. Therefore, a receiving Base Station can transfer tasks to the neigboring Base Stations if needed. Vehicles in the vicinity of the Base Station (within its transmission range) generate service requests. Assuming the variety of services is offered by a vehicular network. We categorise arriving tasks by a task type. Task types represent different requests a vehicle can submit (e.g., Hazards Around the Area, Nearby Gas Stations, Weather Forecast). According to the task type, delay-tolerant tasks are bigger in data size (need more time to execute). Respectively, delay-sensitive tasks are smaller. Due to heterogeneity across the Base Stations, the tasks of different type have different expected completion times in different Base Stations.  Upon the arrival of the task to a Base Station, it is assigned an individual deadline. Individual deadline includes task arrival time and the end to end delay the task can tolerate. We assume in our case that communication delay (uplink and downlink delay) can be significant. Thus, we also consider a communication delay for a deadline calculation. For arriving task ti, deadline di can be defined as: di  = arri+Ei+e+b , where arri  is the arrival time of the task, Ei is the average task completion time, e is a constant value defined by the base station (slack time) and b is the communication delay. In our system model, we assume that tasks arrive at the base station randomly and arrival rate is not known in advance. Receiving Base Station is considered oversubscribed, which means that it receives the number of tasks beyond its capacity to execute within a deadline. Therefore, some tasks are projected to miss their deadline. If such tasks are delay-sensitive, then they are dropped. Dropping tasks is a usual practice in oversubscribed real-time systems []. In such systems, the execution of a task that is going to miss its deadline has no value. For instance, a vehicle requests an update about the road conditions of a specific street. If there is no response by the time the vehicle has reached the street, there is no more value to the requested update. In this research, we define the task robustness as the probability of task to meet its deadline in a particular Base Station. For example, if an arriving task has a greater probability to meet its deadline in the Base Station “A” among a cluster of Base Stations, then Base Station “A” provides a greater robustness for this task. As we aim to provide a robust system from the user perspective, it is assumed that a cloud server is connected to a cluster of Base Stations for a failover or computation-intensive tasks which can not be processed in any of the Base Stations.

3) Delay Estimation:  In a V2I systems, three distinct factors contribute to the definition of the end-to-end delay (DV2I). They are dU, dBS  and dD. Therefore, V2I end-to-end delay can be defined as: DV2I = dU+dBS+dD (1) Where dU  = average uplink delay, dBS  = average delay in the Base Station and dD  = average downlink delay. From the equation (1) dUP  and dD  can be defined as follows. For a task ti  requested by the vehicle i from the Base Station m, the uplink delay from i to m is dU = Li g(i;m) (2) and for ti travelling back from m to i the downlink delay is dD = Li g(m; i) (3) where Li  is the task data size, g(i,m) and g(m,i) is the effective transmission data rate for the link from i to m (uplink bandwidth) and from m to i (downlink bandwidth) respectively.

4) System Model Scenario:  Upon the arrival to the Base Station the task gets into the load balancer. The load balancer works in an immediate mode to allocate arriving tasks to the Base Stations. It can allocate the task to the receiving base station or to the one-hop distance neighboring base station. Therefore, an arriving task gets immediately allocated by the load balancer. When the task is allocated, it enters the batch queue of the Base Station for processing. From the arrival to the end of the task processing a delay is imposed. Such delay can be defined as a “computational delay” (dc). Therefore dBS can be defined as: dBS  = dc , where dc  = the average computational delay.
